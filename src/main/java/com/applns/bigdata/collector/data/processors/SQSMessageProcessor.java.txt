package com.applns.bigdata.collector.data.processors;

import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.HashMap;
import java.util.List;
import java.util.UUID;

import com.applns.bigdata.collector.data.models.Datum;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import software.amazon.awssdk.auth.credentials.EnvironmentVariableCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.sqs.SqsClient;
import software.amazon.awssdk.services.sqs.model.DeleteMessageRequest;
import software.amazon.awssdk.services.sqs.model.GetQueueUrlRequest;
import software.amazon.awssdk.services.sqs.model.Message;
import software.amazon.awssdk.services.sqs.model.QueueAttributeName;
import software.amazon.awssdk.services.sqs.model.ReceiveMessageRequest;
import software.amazon.awssdk.services.sqs.model.SendMessageRequest;
import software.amazon.awssdk.services.sqs.model.SqsException;

public class SQSMessageProcessor {
	
    private final SqsClient sqsClient;
    private final String queueName;
    private final ObjectMapper objectMapper = new ObjectMapper();
    private final String queueUrl;

    public SQSMessageProcessor() {
    	sqsClient = SqsClient.builder()
        .region(Region.US_EAST_1)
        .credentialsProvider(EnvironmentVariableCredentialsProvider.create())
        .build();
		this.queueName = "MessageQueue.fifo";
        GetQueueUrlRequest getQueueRequest = GetQueueUrlRequest.builder()
                .queueName(queueName)
                .build();    	
        this.queueUrl = sqsClient.getQueueUrl(getQueueRequest).queueUrl();
   
    }

    public void sendMessage(String message) throws JsonProcessingException, NoSuchAlgorithmException {
   
        
        Datum datumMsg = new Datum();
        datumMsg.setArtistDisplay("Picasso");
		datumMsg.setId(SecureRandom.getInstanceStrong().nextInt(1000));
        String msg = objectMapper.writeValueAsString(datumMsg);
        String uuid = UUID.randomUUID().toString();
    	SendMessageRequest sendMsgRequest = SendMessageRequest.builder()
                .queueUrl(queueUrl)
                .messageBody(msg)
                .messageGroupId(uuid)
                .messageDeduplicationId(uuid)
                .build();

        sqsClient.sendMessage(sendMsgRequest);
    }
    public static void main(String argsp[]) throws NoSuchAlgorithmException {
    	SQSMessageProcessor messageProcessor = new SQSMessageProcessor();
    	sendMessage(messageProcessor);
    	messageProcessor.receiveMessage();
//    	messageProcessor.setLongPoll();
    }

	private static void sendMessage(SQSMessageProcessor messageProcessor) throws NoSuchAlgorithmException {
		try {
			messageProcessor.sendMessage("");
		} catch (JsonProcessingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
    public void receiveMessage() {
        // Receive messages from the queue
        ReceiveMessageRequest receiveRequest = ReceiveMessageRequest.builder()
                        .queueUrl(queueUrl)
                        .build();
        List<Message> messages = sqsClient.receiveMessage(receiveRequest).messages();
        // Print out the messages
        for (Message m : messages) {
                System.out.println("\n" + m.body());
                DeleteMessageRequest deleteMessageRequest = DeleteMessageRequest.builder()
                        .queueUrl(queueUrl).receiptHandle(m.receiptHandle()).build(); 
                sqsClient.deleteMessage(deleteMessageRequest);
        }
    }
    
    public void setLongPoll() {
        // Enable long polling when creating a queue.
        HashMap<QueueAttributeName, String> attributes = new HashMap<QueueAttributeName, String>();
        attributes.put(QueueAttributeName.RECEIVE_MESSAGE_WAIT_TIME_SECONDS, "20");
        try {
//            SetQueueAttributesRequest setAttrsRequest = SetQueueAttributesRequest.builder()
//                    .queueUrl(queueUrl)
//                    .attributes(attributes)
//                    .build();
//
//            sqsClient.setQueueAttributes(setAttrsRequest);

            // Enable long polling on a message receipt.
            ReceiveMessageRequest receiveRequest = ReceiveMessageRequest.builder()
                    .queueUrl(queueUrl)
	                    .waitTimeSeconds(20)
                    .build();

            sqsClient.receiveMessage(receiveRequest);
            
            System.out.println("-----------");
            
        } catch (SqsException e) {
            System.err.println(e.awsErrorDetails().errorMessage());
            System.exit(1);
        }
    }

}
